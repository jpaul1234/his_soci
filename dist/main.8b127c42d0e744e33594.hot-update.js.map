{"version":3,"file":"main.8b127c42d0e744e33594.hot-update.js","sources":["/home/mickie/development/his_soci/src/views/setup/setup.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useContext, } from 'react';\nimport { makeStyles } from '@material-ui/styles';\n\nimport { HisJsonForm ,HisConfigSchema, UserButton,createEvent, createDataValues, updateDataStore,getMappings,getDataStoreValue, getUserDataStoreValue,checkAssessmentByRespondent,updateUserDataStore,filterAssessmentById } from 'components';\nimport { UrlContext } from '../../App';\nimport merge from 'lodash/merge';\nimport { useLocation } from 'react-router-dom';\nimport { generateUid } from 'd2/uid';\nimport moment from 'moment';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  content: {\n    marginTop: theme.spacing(2)\n  }\n}));\nlet tableData = [];\nlet tableData2 = [];\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nconst useQuery=()=>{\n  return new URLSearchParams(useLocation().search);\n}\nconst HisSetup = (props) => {\n  let query = useQuery();\n  const urlContextValue = useContext(UrlContext);\n  const d2 = urlContextValue.d2;\n  const api = d2.Api.getApi();\n\n  let formStatus = { 'open': true,'submitted':false };\n  let data = [];\n  let userStore = {};\n  let defaultData = { \n    tracking:{ \n      id: query.get(\"id\"),      \n      respondentType:\"Self\",\n      location: \"\",\n      period: \"\",\n      status: 'STARTED',\n      date: moment().format('YYYY-MM-DD'),\n    },\n    background:{\n      reference: query.get(\"assessment\"),\n      stakeholders: [],\n      coverage: []\n    }\n  };\n  const classes = useStyles();\n  const [value,setValue] = useState(formStatus);\n  const [state,setState] = useState([]);\n  const [completed,setCompleted] = useState(false);\n  const [isLoading,setIsLoading] = useState(false);\n  const [uStore,setUstore] = useState({ userStore:{ defaultData: defaultData }});\n\n  const currentEvents = {\n    event: generateUid(),\n    program:'EQnIPsQzZ8R',\n    programStage:'hKuDUonVytS',\n    orgUnit:'wMpIrpoib8b',\n    status: 'COMPLETED',\n    eventDate: moment().format('YYYY-MM-DD'),\n  }\n  const schema = HisConfigSchema.properties.hisstages;\n  const uiSchema = HisConfigSchema.assessmentUiSchema;\n  \n  const getSubmittedData =(dataSaved)=>{\n    console.log(\"datasaved\",dataSaved);\n    formStatus = { 'open': true,'submitted':false };\n    data = dataSaved;\n    tableData2 = dataSaved;\n    return { data:data,formStatus:formStatus}\n  }\n  const handleChange = async(event) => {\n    console.log(\"dataChange\",data);\n    console.log(\"dataChangeState\",tableData2);\n    formStatus = { 'open': false,'submitted':false };\n    await setValue(formStatus);\n    /*tableData[0].tracking.userid = d2.currentUser.id;\n    tableData[0].tracking.username = d2.currentUser.username;\n    tableData[0].tracking.status = 'PENDING';*/\n    save(event,'PENDING');\n  };\n\n  const save = async(event,status) => {\n    formStatus = { 'open': true,'submitted':false };\n    tableData.push(data.data);\n    console.log(\"data\",data);\n    //setState(data);\n    setValue(formStatus);\n\n    /**\n    Creating Data Api\n    **/\n    const events = merge({},currentEvents,createEvent(tableData));\n    const dhis2Events = createDataValues({events:[]},events);\n\n    /*\n    post data to DHIS2\n    */\n    tableData[0].tracking.userid = d2.currentUser.id;\n    tableData[0].tracking.username = d2.currentUser.username;\n    tableData[0].tracking.status = status;\n    const mappings = await getDataStoreValue(d2,'his_soci_tool','mappings');\n    const mappedEvents =getMappings(mappings,dhis2Events);\n    updateDataStore(d2,'his_soci_tool','assessments',tableData,'assessments');\n    updateUserDataStore(d2,'his_soci_tool','assessments',tableData);\n    api.post('events',mappedEvents);\n    setCompleted(true);\n  };\n  const initializeForm=useCallback(async()=>{\n    setIsLoading(true);\n    userStore = await getUserDataStoreValue(d2,'his_soci_tool','assessments');\n    const setupStore =  await getDataStoreValue(d2,'his_soci_tool','setup');\n    const assessmentsStore =  await getDataStoreValue(d2,'his_soci_tool','assessments');\n    \n    // Check equality if setup store has id in respondents, assessment id with get(id,assessment);\n    const assessment = checkAssessmentByRespondent(setupStore.setup,query.get(\"assessment\"),query.get(\"id\"));\n    const existingAssessment = filterAssessmentById(assessmentsStore.assessments,query.get(\"id\"));\n    if(userStore.current[0] !== undefined){\n      if (userStore.current[0].respondentType === 'Consensus'){\n        defaultData = { \n          tracking:{ \n            id: userStore.current[0].id,\n            userid: userStore.current[0].userid,\n            username: userStore.current[0].username, \n            location: userStore.current[0].location,\n            period: userStore.current[0].period,\n            status: 'STARTED',\n            respondentType: 'Consensus',\n            date: userStore.current[0].date,\n          },\n          background:{\n            event: userStore.current[0].event,\n            reference: userStore.current[0].reference,\n            hisType: userStore.current[0].hisType,\n            purpose: userStore.current[0].purpose,\n            mainChallenge: userStore.current[0].mainChallenge,\n            stakeholders: userStore.current[0].respondents,\n            coverage: userStore.current[0].coverage,\n          }\n        };\n      }\n      else{\n        defaultData.tracking.location = assessment.location;\n        defaultData.tracking.period = assessment.period;\n        defaultData.background.hisType = assessment.hisType;\n        defaultData.background.purpose = assessment.purpose;\n        defaultData.background.mainChallenge = assessment.mainChallenge;\n        defaultData.background.stakeholders = assessment.respondents;\n        defaultData.background.event = currentEvents.event;\n        defaultData.background.stakeholders = assessment.respondents;\n        defaultData.background.coverage = assessment.coverage;\n      }\n    }\n    else{\n      defaultData.tracking.location = assessment.location;\n      defaultData.tracking.period = assessment.period;\n      defaultData.background.hisType = assessment.hisType;\n      defaultData.background.purpose = assessment.purpose;\n      defaultData.background.mainChallenge = assessment.mainChallenge;\n      defaultData.background.stakeholders = assessment.respondents;\n      defaultData.background.event = currentEvents.event;\n      defaultData.background.stakeholders = assessment.respondents;\n      defaultData.background.coverage = assessment.coverage;\n    }\n    userStore.defaultData = merge(defaultData,existingAssessment[0]);\n    setUstore(()=>{\n      return {\n        userStore: userStore \n      };\n    });\n    setIsLoading(false);\n    return userStore;\n  },[]);\n  useEffect(()=>{\n    console.log(\"Initial Render\")\n    initializeForm();\n  },[initializeForm]);\n  return (\n    <div className={classes.root}>\n      { \n        <div className={classes.content}>\n          <HisJsonForm title={ 'HIS SOCI Assessment' } data={ uStore.userStore.defaultData } schema={ schema } uiSchema= { uiSchema } getSubmittedData={ getSubmittedData }/>\n        </div>\n      }\n      <UserButton disabled = { completed } color=\"primary\" variant=\"contained\" value=\"Save Draft\" getFormData={ handleChange }/>\n      <UserButton disabled = { completed } color=\"primary\" variant=\"contained\" value=\"Complete\" getFormData={ (ev)=>save(ev,'COMPLETED') }/>\n    </div>\n  );\n};\n\nexport default HisSetup;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAHA;AATA;AAeA;AACA;AAzBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AA6BA;AAAA;AAAA;AAAA;AA7BA;AAAA;AAAA;AACA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AACA;AAAA;AAAA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAXA;AAqBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;A","sourceRoot":""}